{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { cookies, headers } from 'next/headers';\n\nconst publicRoutes = ['/', '/register', '/path:*.svg'];\n\nconst middleware = async (request: NextRequest) => {\n    const cookieStore = await cookies();\n    const credentials = cookieStore.get(\"credentials\")?.value;\n    const pathname = request.nextUrl.pathname;\n    const isAuthenticated = !!credentials;\n    const isPublic = publicRoutes.some((route) => pathname === route || pathname.startsWith(`${route}/`) || pathname.endsWith('.svg'));\n\n    if (!isAuthenticated && !isPublic) {\n        return NextResponse.redirect(new URL(\"/\", request.url));\n    }\n    else if (isAuthenticated && isPublic) {\n        return NextResponse.redirect(new URL(\"/dashboard\", request.url));\n    }\n    return NextResponse.next();\n}\n\nexport const config = {\n    matcher: ['/((?!_next|api|.*\\\\..*).*)'],\n};\n\nexport { middleware };\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAEA;AAAA;;;AAEA,MAAM,eAAe;IAAC;IAAK;IAAa;CAAc;AAEtD,MAAM,aAAa,OAAO;IACtB,MAAM,cAAc,MAAM,IAAA,sLAAO;IACjC,MAAM,cAAc,YAAY,GAAG,CAAC,gBAAgB;IACpD,MAAM,WAAW,QAAQ,OAAO,CAAC,QAAQ;IACzC,MAAM,kBAAkB,CAAC,CAAC;IAC1B,MAAM,WAAW,aAAa,IAAI,CAAC,CAAC,QAAU,aAAa,SAAS,SAAS,UAAU,CAAC,GAAG,MAAM,CAAC,CAAC,KAAK,SAAS,QAAQ,CAAC;IAE1H,IAAI,CAAC,mBAAmB,CAAC,UAAU;QAC/B,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACzD,OACK,IAAI,mBAAmB,UAAU;QAClC,OAAO,gMAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAClE;IACA,OAAO,gMAAY,CAAC,IAAI;AAC5B;AAEO,MAAM,SAAS;IAClB,SAAS;QAAC;KAA6B;AAC3C"}}]
}