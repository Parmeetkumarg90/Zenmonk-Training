"use client"
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Provider } from "react-redux";
import { PersistGate } from "redux-persist/integration/react";
import { persister, RootState, store } from "@/redux/store";
import { SnackbarProvider } from "notistack";
import { ThemeProvider } from "@mui/material";
import theme from "@/theme";
import GlobalStyles from "@mui/material/GlobalStyles";
import { useEffect, useRef } from "react";
import { doc, setDoc } from "firebase/firestore";
import { firestoreDb } from "@/config/firebase";
import { useAppSelector } from "@/redux/hook";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const globalStyles = (
  <GlobalStyles
    styles={{
      '*, *::before, *::after': {
        boxSizing: 'border-box',
        padding: "0",
        margin: "0",
        fontSize: "0.9rem",
      },
    }}
  />
);

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };


export default function RootLayout({ children }: Readonly<{ children: React.ReactNode; }>) {
  const elemRef = useRef<HTMLElement>(null);

  useEffect(() => {
    const loggedInUser = JSON.parse(JSON.parse(localStorage.getItem("currentUser")!));
    const handleOfflineStatus = async (event: BeforeUnloadEvent) => {
      await setDoc(doc(firestoreDb, "users", loggedInUser.id), { ...loggedInUser, isOnline: false });
    }

    const handleOnlineStatus = async (event: BeforeUnloadEvent) => {
      await setDoc(doc(firestoreDb, "users", loggedInUser.id), { ...loggedInUser, isOnline: true });
    }
    if (elemRef.current) {
      elemRef.current.addEventListener("load", handleOnlineStatus);
      elemRef.current.addEventListener("beforeunload", handleOfflineStatus);
    }

    return () => {
      if (elemRef.current) {
        elemRef.current.removeEventListener("load", handleOnlineStatus);
        elemRef.current.removeEventListener("beforeunload", handleOfflineStatus);
      }
    }
  }, []);

  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <ThemeProvider theme={theme}>
          {globalStyles}
          <SnackbarProvider maxSnack={3} autoHideDuration={1500}>
            <Provider store={store}>
              <PersistGate loading={null} persistor={persister}>
                <span ref={elemRef}>
                  {children}
                </span>
              </PersistGate>
            </Provider>
          </SnackbarProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
